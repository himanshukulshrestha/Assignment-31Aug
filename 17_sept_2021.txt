1. Ask user to enter five names

convert third character in a name to uppercase
------------------------------------------------Solution-------------------------------------------------

package com.yash.collection;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Scanner;

public class Users {

	public static void main(String[] args) {

		List<String> users = new ArrayList<>();
		List<String> mod = new ArrayList<>();
		System.out.println("Enter five names");
		try (Scanner scanner = new Scanner(System.in)) {
			for (int i = 0; i <= 1; i++) {

				String userName = scanner.next();

				users.add(userName);

			}

		} catch (Exception e) {

			e.printStackTrace();
		}
		char c = 'a';

		for (int i = 0; i < users.size(); i++) {

			if (users.get(i).charAt(2) >= 'a' && users.get(i).charAt(2) <= 'z') {
				c = (char) (users.get(i).charAt(2) - 32);

			}
			mod.add(users.get(i).replace(users.get(i).charAt(2), c));
		}

		for (int i = 0; i < mod.size(); i++) {
			System.out.println(mod.get(i));
		}

	}
}


3. Ask user to enter 6 student records with following attributes

   Roll No
   firstName
   lastName
   age
   semester 1 marks
   semester 2 marks
   semester 3 marks

 display Sorted student details based on age,firstName and lastName in ascending order.

 display Sorted student details based on percentage of semester marks in descending order.

------------------------------------------------Solution-------------------------------------------------

package com.yash.collection;

public class StudentEntity implements Comparable<StudentEntity> {
	private double rollNo;
	private String firstName;
	private String lastName;
	private int age;
	private double semester1marks;
	private double semester2marks;
	private double semester3marks;

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + age;
		result = prime * result + ((firstName == null) ? 0 : firstName.hashCode());
		result = prime * result + ((lastName == null) ? 0 : lastName.hashCode());
		long temp;
		temp = Double.doubleToLongBits(rollNo);
		result = prime * result + (int) (temp ^ (temp >>> 32));
		temp = Double.doubleToLongBits(semester1marks);
		result = prime * result + (int) (temp ^ (temp >>> 32));
		temp = Double.doubleToLongBits(semester2marks);
		result = prime * result + (int) (temp ^ (temp >>> 32));
		temp = Double.doubleToLongBits(semester3marks);
		result = prime * result + (int) (temp ^ (temp >>> 32));
		return result;
	}

	public StudentEntity(double rollNo, String firstName, String lastName, int age, double semester1marks,
			double semester2marks, double semester3marks) {
		super();
		this.rollNo = rollNo;
		this.firstName = firstName;
		this.lastName = lastName;
		this.age = age;
		this.semester1marks = semester1marks;
		this.semester2marks = semester2marks;
		this.semester3marks = semester3marks;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		StudentEntity other = (StudentEntity) obj;
		if (age != other.age)
			return false;
		if (firstName == null) {
			if (other.firstName != null)
				return false;
		} else if (!firstName.equals(other.firstName))
			return false;
		if (lastName == null) {
			if (other.lastName != null)
				return false;
		} else if (!lastName.equals(other.lastName))
			return false;
		if (Double.doubleToLongBits(rollNo) != Double.doubleToLongBits(other.rollNo))
			return false;
		if (Double.doubleToLongBits(semester1marks) != Double.doubleToLongBits(other.semester1marks))
			return false;
		if (Double.doubleToLongBits(semester2marks) != Double.doubleToLongBits(other.semester2marks))
			return false;
		if (Double.doubleToLongBits(semester3marks) != Double.doubleToLongBits(other.semester3marks))
			return false;
		return true;
	}

	@Override
	public String toString() {
		return "Students [rollNo=" + rollNo + ", firstName=" + firstName + ", lastName=" + lastName + ", age=" + age
				+ ", semester1marks=" + semester1marks + ", semester2marks=" + semester2marks + ", semester3marks="
				+ semester3marks + "]";
	}

	public double getRollNo() {
		return rollNo;
	}

	public void setRollNo(double rollNo) {
		this.rollNo = rollNo;
	}

	public String getFirstName() {
		return firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public String getLastName() {
		return lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	public int getAge() {
		return age;
	}

	public void setAge(int age) {
		this.age = age;
	}

	public double getSemester1marks() {
		return semester1marks;
	}

	public void setSemester1marks(double semester1marks) {
		this.semester1marks = semester1marks;
	}

	public double getSemester2marks() {
		return semester2marks;
	}

	public void setSemester2marks(double semester2marks) {
		this.semester2marks = semester2marks;
	}

	public double getSemester3marks() {
		return semester3marks;
	}

	public void setSemester3marks(double semester3marks) {
		this.semester3marks = semester3marks;
	}

	@Override
	public int compareTo(StudentEntity se) {

		if (this.age > se.age)
			return 1;

		else if (this.age < se.age)
			return -1;
		else
			return 0;

	}

}


package com.yash.collection;

import java.util.ArrayList;

import java.util.Collections;
import java.util.Comparator;
import java.util.List;
public class Student {
	
	public static void main(String[] args) {
		StudentEntity se1 = new StudentEntity(1, "Himanshu", "kulshrestha", 24, 78, 87, 85);
		StudentEntity se2 = new StudentEntity(2, "moin", "sheikh", 21, 78, 87, 85);
		StudentEntity se3 = new StudentEntity(3, "aadesh", "gupta", 25, 78, 87, 85);
		
		List<StudentEntity> se = new ArrayList<StudentEntity>();
		se.add(se1);
		se.add(se2);
		se.add(se3);
		
		Collections.sort(se);
		System.out.println("Sorted Students based on Age : "+"\n");
		System.out.println(se);
		
		Comparator<StudentEntity> es = new Comparator<StudentEntity>() {

			@Override
			public int compare(StudentEntity o1, StudentEntity o2) {
				return o1.getFirstName().compareTo(o2.getFirstName());
			}
		};
		System.out.println("--Data sorted based on student firstName--"+"\n");
		Collections.sort(se, es);
		
		for(StudentEntity student:se) {
			System.out.println(student);
		}
	}

}







